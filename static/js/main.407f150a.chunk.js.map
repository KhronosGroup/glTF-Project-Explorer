{"version":3,"sources":["components/ProjectDetailList.tsx","components/ProjectCardHeader.tsx","components/Markdown.tsx","components/ProjectCard.tsx","components/ProjectList.tsx","store/filters/Types.ts","interfaces/IFilter.ts","store/filters/Actions.ts","utils/FilterHelpers.ts","components/FilterBarOptions.tsx","components/FilterBarSelected.tsx","components/FilterBar.tsx","components/SearchBar.tsx","store/projects/Types.ts","store/results/Types.ts","App.tsx","store/Reducers.ts","store/projects/Reducers.ts","store/filters/Reducers.ts","store/results/Reducers.ts","services/DataService.ts","store/projects/Actions.ts","store/projects/Sagas.ts","store/projects/Selectors.ts","store/filters/Sagas.ts","store/filters/Selectors.ts","store/results/Actions.ts","store/results/Sagas.ts","store/Sagas.ts","index.tsx"],"names":["ProjectDetailList","props","header","items","className","map","item","ProjectCardHeader","project","link","href","name","Markdown","unsafeMarkdown","body","useState","__html","safeHtml","setSafeHtml","useEffect","md","Promise","resolve","reject","marked","err","result","purify","sanitize","then","dangerouslySetInnerHTML","shouldShowSection","length","ProjectCard","description","task","license","language","type","inputs","outputs","connect","FilterActionTypes","FilterDimension","state","projects","results","values","p","id","updateFilters","tasks","types","licenses","languages","tags","titleSubstring","UPDATE_FILTERS","updateSelectedFilters","selected","Set","UPDATE_SELECTED_FILTERS","createNewFilter","dimension","value","determineClassName","filter","Type","Task","License","Language","Tags","FilterBarOptions","filters","label","addAction","isVisible","setIsVisible","toggleVisibility","useCallback","onClick","f","FilterBarSelected","selectedFilters","removeAction","resetAction","selectedFiltersArray","Array","from","mapDispatchToProps","taskFilters","typeFilters","licenseFilters","languageFilters","tagFilters","handleFilterAddClick","_","add","handleFilterRemoveClick","delete","handleFilterResetClick","clear","ProjectsActionTypes","ResultsActionTypes","updateTitleSubstringFilter","UPDATE_TITLE_SUBSTRING_FILTER","handleSearch","event","newTitleSubstring","target","placeholder","onChange","App","src","process","alt","position","color","combineReducers","isFetchingProjects","action","PROJECTS_REQUESTED","PROJECTS_SUCCESSFUL","PROJECTS_FAILED","STORE_RESULTS","fetchProjects","fetch","r","json","catch","error","console","successfulProjects","retrieveProjects","updateProjects","call","put","actions","takeEvery","getProjects","calculateFilters","watchForFilterRecalculate","calculateTaskFilters","flatMap","x","t","calculateTypeFilters","calculateLicenseFilters","l","calculateLanguageFilters","calculateTagFilters","select","projectSelectors","all","getFilters","getSelectedFilters","createSelector","getTitleSubstring","storeResults","applyFilters","watchForResultUpdates","tagPriority","applyTagFilters","size","dimensions","Object","groupedFilters","reduce","acc","curr","push","match","some","v","applyTitleSearchFilter","titleSubstringLowerCase","toLowerCase","includes","sortResults","buckets","tag","entries","sort","a","b","localeCompare","filterSelectors","filteredResults","searchedResults","debounce","startup","root","fork","watchForProjectUpdates","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","rootSagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.407f150a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ProjectDetailList.css\";\n\nexport interface IProjectDetailListProps {\n  header: string;\n  items?: string[];\n}\n\nconst ProjectDetailList: React.FC<IProjectDetailListProps> = props => {\n  const { header, items } = props;\n\n  if (!items) {\n    return null;\n  }\n\n  return (\n    <div className=\"project-card-details\">\n      <h2>{header}</h2>\n      <ul>\n        {items.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ProjectDetailList;\n","import React from \"react\";\nimport { IProjectInfo } from \"../interfaces/IProjectInfo\";\n\ninterface IProjectCardHeader {\n  project: IProjectInfo;\n}\n\nconst ProjectCardHeader: React.FC<IProjectCardHeader> = props => {\n  const { project } = props;\n\n  return (\n    <h1>\n      {project.link ? <a href={project.link}>{project.name}</a> : project.name}\n    </h1>\n  );\n};\n\nexport default ProjectCardHeader;\n","import React, { useState, useEffect } from \"react\";\nimport marked from \"marked\";\nimport purify from \"dompurify\";\n\ninterface IMarkdown {\n  className: string;\n  body: string;\n}\n\nconst parseAndSanitizeMarkdown = (md: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    marked(md, (err, result) => {\n      if (err) reject(err);\n\n      // Marked does not sanitize the html, so we must do so ourselves.\n      resolve(purify.sanitize(result));\n    });\n  });\n};\n\nconst Markdown: React.FC<IMarkdown> = props => {\n  const { className, body: unsafeMarkdown } = props;\n\n  const [safeHtml, setSafeHtml] = useState({ __html: \"\" });\n\n  // This effect is for performance reasons. It will only execute if the value\n  //   of the body prop is updated.\n  useEffect(() => {\n    parseAndSanitizeMarkdown(unsafeMarkdown).then(result =>\n      setSafeHtml({ __html: result })\n    );\n  }, [unsafeMarkdown]);\n\n  return <div className={className} dangerouslySetInnerHTML={safeHtml}></div>;\n};\n\nexport default Markdown;\n","import React from \"react\";\nimport { IProjectInfo } from \"../interfaces/IProjectInfo\";\nimport ProjectDetailList from \"./ProjectDetailList\";\nimport ProjectCardHeader from \"./ProjectCardHeader\";\nimport \"./ProjectCard.css\";\nimport Markdown from \"./Markdown\";\n\nconst shouldShowSection = (items?: string[]) => items && items.length > 0;\n\nexport interface IProjectCardProps {\n  project: IProjectInfo;\n}\n\nconst ProjectCard: React.FC<IProjectCardProps> = props => {\n  const { project } = props;\n\n  return (\n    <div className=\"project-card\">\n      <ProjectCardHeader project={project} />\n      <div className=\"project-card-content\">\n        {project.description && (\n          <Markdown\n            className=\"project-card-description\"\n            body={project.description}\n          />\n        )}\n        {shouldShowSection(project.task) && (\n          <ProjectDetailList header=\"Task\" items={project.task} />\n        )}\n        {shouldShowSection(project.license) && (\n          <ProjectDetailList header=\"License\" items={project.license} />\n        )}\n        {shouldShowSection(project.language) && (\n          <ProjectDetailList\n            header=\"Supported Languages\"\n            items={project.language!}\n          />\n        )}\n        {shouldShowSection(project.type) && (\n          <ProjectDetailList header=\"Type\" items={project.type} />\n        )}\n        {shouldShowSection(project.inputs) && (\n          <ProjectDetailList header=\"Input Methods\" items={project.inputs} />\n        )}\n        {shouldShowSection(project.outputs) && (\n          <ProjectDetailList header=\"Output Methods\" items={project.outputs} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IProjectInfo } from \"../interfaces/IProjectInfo\";\nimport { IAppState } from \"../interfaces/IAppState\";\nimport ProjectCard from \"./ProjectCard\";\n\nexport interface IProjectListProps {\n  projects: IProjectInfo[];\n}\n\nconst ProjectList: React.FC<IProjectListProps> = props => {\n  const { projects } = props;\n\n  return (\n    <>{projects && projects.map(p => <ProjectCard project={p} key={p.id} />)}</>\n  );\n};\n\nfunction mapStateToProps(state: IAppState): IProjectListProps {\n  const {\n    results: { values: projects },\n  } = state;\n\n  return { projects };\n}\n\nexport default connect(mapStateToProps)(ProjectList);\n","export enum FilterActionTypes {\n  UPDATE_FILTERS = \"UPDATE_FILTERS\",\n  UPDATE_SELECTED_FILTERS = \"UPDATE_SELECTED_FILTERS\",\n  UPDATE_TITLE_SUBSTRING_FILTER = \"UPDATE_TITLE_SUBSTRING_FILTER\",\n  PERFORM_SEARCH = \"PERFORM_SEARCH\"\n}\n","export enum FilterDimension {\n  Task = \"task\",\n  Type = \"type\",\n  License = \"license\",\n  Language = \"language\",\n  Tags = \"tags\"\n}\n\nexport interface IFilter {\n  dimension: FilterDimension;\n  value: string;\n  // selected: boolean;\n}\n\nexport function createNewFilter(\n  dimension: FilterDimension,\n  value: string\n): IFilter {\n  return {\n    dimension,\n    value,\n    // selected: false\n  };\n}\n","import {\n  IUpdateFiltersAction,\n  IUpdateSelectedFiltersAction,\n  IUpdateTitleSubstringFilterAction,\n} from \"./Interfaces\";\nimport { FilterActionTypes } from \"./Types\";\nimport { IFilter } from \"../../interfaces/IFilter\";\n\nexport function updateFilters(\n  tasks: IFilter[],\n  types: IFilter[],\n  licenses: IFilter[],\n  languages: IFilter[],\n  tags: IFilter[],\n  titleSubstring: string\n): IUpdateFiltersAction {\n  return {\n    type: FilterActionTypes.UPDATE_FILTERS,\n    tasks,\n    types,\n    licenses,\n    languages,\n    tags,\n    titleSubstring,\n  };\n}\n\nexport function updateSelectedFilters(\n  selected: Set<IFilter>\n): IUpdateSelectedFiltersAction {\n  // React needs a new Set each time.\n  selected = new Set(selected);\n  return {\n    type: FilterActionTypes.UPDATE_SELECTED_FILTERS,\n    selected,\n  };\n}\n\nexport function updateTitleSubstringFilter(\n  titleSubstring: string\n): IUpdateTitleSubstringFilterAction {\n  return {\n    type: FilterActionTypes.UPDATE_TITLE_SUBSTRING_FILTER,\n    titleSubstring,\n  };\n}\n","import { IFilter, FilterDimension } from \"../interfaces/IFilter\";\n\nexport const determineClassName = (filter: IFilter) => {\n  switch (filter.dimension) {\n    case FilterDimension.Type:\n      return \"type-filter\";\n    case FilterDimension.Task:\n      return \"task-filter\";\n    case FilterDimension.License:\n      return \"license-filter\";\n    case FilterDimension.Language:\n      return \"language-filter\";\n    case FilterDimension.Tags:\n      return \"tags-filter\";\n    default:\n      return \"\";\n  }\n};\n","import React, { useState, useCallback } from \"react\";\nimport { IFilter } from \"../interfaces/IFilter\";\nimport { determineClassName } from \"../utils/FilterHelpers\";\nimport \"./FilterBarOptions.css\";\n\nexport interface IFilterBarOptionsProps {\n  filters: IFilter[];\n  label: string;\n  addAction: (f: IFilter) => (_: React.MouseEvent) => void;\n}\n\nconst FilterBarOptions: React.FC<IFilterBarOptionsProps> = props => {\n  const { filters, label, addAction } = props;\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = useCallback(() => {\n    setIsVisible(!isVisible);\n  }, [isVisible, setIsVisible]);\n\n  return (\n    <>\n      {filters.length > 0 && (\n        <div className=\"filter-bar-options\">\n          <h2 onClick={toggleVisibility}>\n            {label} {isVisible ? \"▲\" : \"▼\"}\n          </h2>\n          <div className={isVisible ? \"\" : \"hide\"}>\n            <ul>\n              {filters.map(f => (\n                <li key={f.value}>\n                  <button\n                    className={determineClassName(f)}\n                    onClick={addAction(f)}\n                  >\n                    {f.value}\n                  </button>\n                </li>\n              ))}\n            </ul>\n            <p className=\"instructions\">Click to add</p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FilterBarOptions;\n","import React from \"react\";\nimport { IFilter } from \"../interfaces/IFilter\";\nimport \"./FilterBarSelected.css\";\nimport { determineClassName } from \"../utils/FilterHelpers\";\n\nexport interface IFilterBarSelectedProps {\n  selectedFilters: Set<IFilter>;\n  removeAction: (f: IFilter) => (_: React.MouseEvent) => void;\n  resetAction: (_: React.MouseEvent) => void;\n}\n\nconst FilterBarSelected: React.FC<IFilterBarSelectedProps> = props => {\n  const { selectedFilters, removeAction, resetAction } = props;\n\n  const selectedFiltersArray = Array.from(selectedFilters);\n\n  return (\n    <div className=\"filter-bar-selected\">\n      <h2>Selected Filters</h2>\n      <ul>\n        {selectedFiltersArray.length > 0 ? (\n          <>\n            {selectedFiltersArray.map(f => (\n              <li key={f.value}>\n                <button\n                  className={determineClassName(f)}\n                  onClick={removeAction(f)}\n                >\n                  {f.value} <span className=\"clear-cross\">✕</span>\n                </button>\n              </li>\n            ))}\n            <li>\n              <button className=\"clear-all-filters\" onClick={resetAction}>\n                Clear All Filters\n              </button>\n            </li>\n          </>\n        ) : (\n          <li>\n            <p className=\"no-filters-message\">No filters selected.</p>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default FilterBarSelected;\n","import React, { useCallback, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IFilter } from \"../interfaces/IFilter\";\nimport { IAppState } from \"../interfaces/IAppState\";\nimport { updateSelectedFilters } from \"../store/filters/Actions\";\nimport FilterBarOptions from \"./FilterBarOptions\";\nimport \"./FilterBar.css\";\nimport FilterBarSelected from \"./FilterBarSelected\";\n\nexport interface IFilterBarProps {\n  taskFilters: IFilter[];\n  typeFilters: IFilter[];\n  licenseFilters: IFilter[];\n  languageFilters: IFilter[];\n  tagFilters: IFilter[];\n  selectedFilters: Set<IFilter>;\n  updateSelectedFilters: typeof updateSelectedFilters;\n}\n\nconst FilterBar: React.FC<IFilterBarProps> = props => {\n  const {\n    taskFilters,\n    typeFilters,\n    licenseFilters,\n    languageFilters,\n    selectedFilters,\n    tagFilters,\n    updateSelectedFilters,\n  } = props;\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = useCallback(() => {\n    setIsVisible(!isVisible);\n  }, [isVisible, setIsVisible]);\n\n  const handleFilterAddClick = useCallback(\n    (filter: IFilter) => (_: React.MouseEvent) => {\n      selectedFilters.add(filter);\n      updateSelectedFilters(selectedFilters);\n    },\n    [selectedFilters, updateSelectedFilters]\n  );\n\n  const handleFilterRemoveClick = useCallback(\n    (filter: IFilter) => (_: React.MouseEvent) => {\n      selectedFilters.delete(filter);\n      updateSelectedFilters(selectedFilters);\n    },\n    [selectedFilters, updateSelectedFilters]\n  );\n\n  const handleFilterResetClick = useCallback(\n    _ => {\n      selectedFilters.clear();\n      updateSelectedFilters(selectedFilters);\n    },\n    [selectedFilters, updateSelectedFilters]\n  );\n\n  return (\n    <div className=\"filter-bar\">\n      <div className=\"filter-bar-header\">\n        <h1 onClick={toggleVisibility}>\n          Filter Results {isVisible ? \"▲\" : \"▼\"}\n        </h1>\n      </div>\n      <div className={isVisible ? \"filter-bar-expando\" : \"hide\"}>\n        <FilterBarSelected\n          selectedFilters={selectedFilters}\n          removeAction={handleFilterRemoveClick}\n          resetAction={handleFilterResetClick}\n        />\n        <FilterBarOptions\n          filters={tagFilters}\n          label=\"Filter by Tag\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={taskFilters}\n          label=\"Filter by Task\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={typeFilters}\n          label=\"Filter by Type\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={licenseFilters}\n          label=\"Filter by License\"\n          addAction={handleFilterAddClick}\n        />\n        <FilterBarOptions\n          filters={languageFilters}\n          label=\"Filter by Language\"\n          addAction={handleFilterAddClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state: IAppState) {\n  const {\n    filters: {\n      tasks: taskFilters,\n      types: typeFilters,\n      licenses: licenseFilters,\n      languages: languageFilters,\n      tags: tagFilters,\n      selected: selectedFilters,\n    },\n  } = state;\n\n  return {\n    taskFilters,\n    typeFilters,\n    licenseFilters,\n    languageFilters,\n    tagFilters,\n    selectedFilters,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateSelectedFilters,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterBar);\n","import React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IAppState } from \"../interfaces/IAppState\";\nimport { updateTitleSubstringFilter } from \"../store/filters/Actions\";\nimport \"./SearchBar.css\";\n\nexport interface ISearchBarProps {\n  titleSubstring: string;\n  updateTitleSubstringFilter: typeof updateTitleSubstringFilter;\n}\n\nconst SearchBar: React.FC<ISearchBarProps> = props => {\n  const { titleSubstring, updateTitleSubstringFilter } = props;\n\n  const handleSearch = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newTitleSubstring = event.target.value;\n      updateTitleSubstringFilter(newTitleSubstring);\n    },\n    [updateTitleSubstringFilter]\n  );\n\n  return (\n    <div className=\"search-bar\">\n      <h1>Search by Title</h1>\n      <input\n        placeholder=\"Type to search\"\n        value={titleSubstring}\n        onChange={handleSearch}\n      ></input>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state: IAppState) {\n  const {\n    filters: { titleSubstring },\n  } = state;\n\n  return {\n    titleSubstring,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTitleSubstringFilter,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","export enum ProjectsActionTypes {\n  PROJECTS_REQUESTED = \"PROJECTS_REQUESTED\",\n  PROJECTS_SUCCESSFUL = \"PROJECTS_SUCCESSFUL\",\n  PROJECTS_FAILED = \"PROJECTS_FAILED\"\n}\n","export enum ResultsActionTypes {\n  RECALCULATE_RESULTS = \"RECALCULATE_RESULTS\",\n  STORE_RESULTS = \"STORE_RESULTS\"\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ProjectList from \"./components/ProjectList\";\nimport FilterBar from \"./components/FilterBar\";\nimport SearchBar from \"./components/SearchBar\";\nimport GitHubForkRibbon from \"react-github-fork-ribbon\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <div className=\"header\">\n        <img src={`${process.env.PUBLIC_URL}/glTF_RGB_June16.svg`} alt=\"glTF\" />\n        <h1>Project Explorer</h1>\n      </div>\n      <div className=\"content\">\n        <SearchBar></SearchBar>\n        <FilterBar></FilterBar>\n        <ProjectList></ProjectList>\n      </div>\n      <GitHubForkRibbon\n        position=\"right\"\n        color=\"white\"\n        href=\"https://github.com/KhronosGroup/glTF-Project-Explorer\"\n      >\n        Fork us on GitHub\n      </GitHubForkRibbon>\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { projects } from \"./projects/Reducers\";\nimport { filters } from \"./filters/Reducers\";\nimport { results } from \"./results/Reducers\";\n\nexport default combineReducers({\n  projects,\n  filters,\n  results,\n});\n","import { ProjectsActions } from \"./Interfaces\";\nimport { ProjectsActionTypes } from \"./Types\";\nimport { IProjectsState } from \"../../interfaces/IAppState\";\n\nexport function projects(\n  state: IProjectsState = {\n    isFetchingProjects: false,\n    values: [],\n  },\n  action: ProjectsActions\n) {\n  switch (action.type) {\n    case ProjectsActionTypes.PROJECTS_REQUESTED:\n      return { ...state, isFetchingProjects: true };\n    case ProjectsActionTypes.PROJECTS_SUCCESSFUL:\n      return { ...state, values: action.projects, isFetchingProjects: false };\n    case ProjectsActionTypes.PROJECTS_FAILED:\n      return { ...state, isFetchingProjects: false };\n    default:\n      return state;\n  }\n}\n","import { IFiltersState } from \"../../interfaces/IAppState\";\nimport { FilterActionTypes } from \"./Types\";\nimport { FiltersActions } from \"./Interfaces\";\n\nexport function filters(\n  state: IFiltersState = {\n    tasks: [],\n    types: [],\n    licenses: [],\n    languages: [],\n    tags: [],\n    titleSubstring: \"\",\n    selected: new Set(),\n  },\n  action: FiltersActions\n) {\n  switch (action.type) {\n    case FilterActionTypes.UPDATE_FILTERS:\n      return {\n        ...state,\n        tasks: action.tasks,\n        types: action.types,\n        licenses: action.licenses,\n        languages: action.languages,\n        tags: action.tags,\n        titleSubstring: action.titleSubstring,\n      };\n    case FilterActionTypes.UPDATE_SELECTED_FILTERS:\n      return {\n        ...state,\n        selected: action.selected,\n      };\n    case FilterActionTypes.UPDATE_TITLE_SUBSTRING_FILTER:\n      return {\n        ...state,\n        titleSubstring: action.titleSubstring,\n      };\n    default:\n      return state;\n  }\n}\n","import { IResultsState } from \"../../interfaces/IAppState\";\nimport { ResultsActions } from \"./Interfaces\";\nimport { ResultsActionTypes } from \"./Types\";\n\nexport function results(\n  state: IResultsState = {\n    values: [],\n  },\n  action: ResultsActions\n) {\n  switch (action.type) {\n    case ResultsActionTypes.STORE_RESULTS:\n      return { ...state, values: action.results };\n    default:\n      return state;\n  }\n}\n","import { IProjectInfo } from \"../interfaces/IProjectInfo\";\n\n// Despite the data being a static file, we don't pull it in using Webpack so\n//   we can change to using a restful service in the future.\nexport function fetchProjects(): Promise<IProjectInfo[]> {\n  return fetch(`${process.env.PUBLIC_URL}/data/glTF-projects-data.json`)\n    .then(r => r.json())\n    .catch(error => console.error(`Error fetching data. Reason: ${error}`));\n}\n","import {\n  IRequestProjectsAction,\n  ISuccessfulProjectsAction,\n  IFailedProjectsAction,\n} from \"./Interfaces\";\nimport { ProjectsActionTypes } from \"./Types\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\n\nexport function requestProjects(): IRequestProjectsAction {\n  return {\n    type: ProjectsActionTypes.PROJECTS_REQUESTED,\n  };\n}\n\nexport function successfulProjects(\n  projects: IProjectInfo[]\n): ISuccessfulProjectsAction {\n  return {\n    type: ProjectsActionTypes.PROJECTS_SUCCESSFUL,\n    projects,\n  };\n}\n\nexport function failedProjects(error: Error): IFailedProjectsAction {\n  return {\n    type: ProjectsActionTypes.PROJECTS_FAILED,\n    error: error,\n  };\n}\n","import { call, takeEvery, put } from \"redux-saga/effects\";\nimport { fetchProjects } from \"../../services/DataService\";\nimport * as actions from \"./Actions\";\nimport { ProjectsActionTypes } from \"./Types\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\n\nexport function* retrieveProjects() {\n  try {\n    const projects: IProjectInfo[] = yield call(fetchProjects);\n    let id = 0;\n    yield put(\n      actions.successfulProjects(\n        projects.map(p => {\n          // This work gives us a stable key. Eventually when this is database\n          // backed the ID will be provided by the DB and this can be removed.\n          p.id = id++;\n          return p;\n        })\n      )\n    );\n  } catch (err) {\n    yield put(actions.failedProjects(err));\n  }\n}\n\nexport function* updateProjects() {\n  yield takeEvery(ProjectsActionTypes.PROJECTS_REQUESTED, retrieveProjects);\n}\n","import { IAppState } from \"../../interfaces/IAppState\";\n\nexport const getProjects = (state: IAppState) => state.projects.values;\n","import { takeEvery, all, call, select, put } from \"redux-saga/effects\";\nimport { createNewFilter, FilterDimension } from \"../../interfaces/IFilter\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\nimport { ProjectsActionTypes } from \"../projects/Types\";\nimport * as projectSelectors from \"../projects/Selectors\";\nimport * as actions from \"./Actions\";\n\nconst DEFAULT_FULL_TEXT_TITLE_VALUE = \"\";\n\nexport function calculateTaskFilters(projects: IProjectInfo[]) {\n  const tasks = [\n    ...new Set(projects.flatMap((p) => p.task).filter((x) => x)),\n  ] as string[]; // We know we have no undefined or blank values.\n  return tasks.map((t) => createNewFilter(FilterDimension.Task, t));\n}\n\nexport function calculateTypeFilters(projects: IProjectInfo[]) {\n  const types = [\n    ...new Set(projects.flatMap((p) => p.type).filter((x) => x)),\n  ] as string[];\n  return types.map((t) => createNewFilter(FilterDimension.Type, t));\n}\n\nexport function calculateLicenseFilters(projects: IProjectInfo[]) {\n  const licenses = [\n    ...new Set(projects.flatMap((p) => p.license).filter((x) => x)),\n  ] as string[];\n  return licenses.map((l) => createNewFilter(FilterDimension.License, l));\n}\n\nexport function calculateLanguageFilters(projects: IProjectInfo[]) {\n  const languages = [\n    ...new Set(projects.flatMap((p) => p.language).filter((x) => x)),\n  ] as string[];\n  return languages.map((l) => createNewFilter(FilterDimension.Language, l));\n}\n\nexport function calculateTagFilters(projects: IProjectInfo[]) {\n  const tags = [\n    ...new Set(projects.flatMap((p) => p.tags).filter((x) => x)),\n  ] as string[];\n  return tags.map((t) => createNewFilter(FilterDimension.Tags, t));\n}\n\nexport function* calculateFilters(): any {\n  const projects = yield select(projectSelectors.getProjects);\n  const [tasks, types, licenses, languages, tags] = yield all([\n    call(calculateTaskFilters, projects),\n    call(calculateTypeFilters, projects),\n    call(calculateLicenseFilters, projects),\n    call(calculateLanguageFilters, projects),\n    call(calculateTagFilters, projects),\n  ]);\n  yield put(\n    actions.updateFilters(\n      tasks,\n      types,\n      licenses,\n      languages,\n      tags,\n      DEFAULT_FULL_TEXT_TITLE_VALUE\n    )\n  );\n  yield put(actions.updateSelectedFilters(new Set()));\n}\n\nexport function* watchForFilterRecalculate() {\n  yield takeEvery(ProjectsActionTypes.PROJECTS_SUCCESSFUL, calculateFilters);\n}\n","import { createSelector } from \"reselect\";\nimport { IAppState } from \"../../interfaces/IAppState\";\n\nexport const getFilters = (state: IAppState) => state.filters;\n\nexport const getSelectedFilters = createSelector(\n  getFilters,\n  filters => filters.selected\n);\n\nexport const getTitleSubstring = createSelector(\n  getFilters,\n  filters => filters.titleSubstring\n);\n","import { IProjectInfo } from \"../../interfaces/IProjectInfo\";\nimport { ResultsActionTypes } from \"./Types\";\nimport { IRecalculateResultsAction, IStoreResultsAction } from \"./Interfaces\";\n\nexport function storeResults(results: IProjectInfo[]): IStoreResultsAction {\n  return {\n    type: ResultsActionTypes.STORE_RESULTS,\n    results,\n  };\n}\n\nexport function recalculateResults(): IRecalculateResultsAction {\n  return {\n    type: ResultsActionTypes.RECALCULATE_RESULTS,\n  };\n}\n","import { takeEvery, all, put, select, debounce } from \"redux-saga/effects\";\nimport * as projectSelectors from \"../projects/Selectors\";\nimport * as filterSelectors from \"../filters/Selectors\";\nimport { IProjectInfo } from \"../../interfaces/IProjectInfo\";\nimport * as actions from \"./Actions\";\nimport { IFilter, FilterDimension } from \"../../interfaces/IFilter\";\nimport { FilterActionTypes } from \"../filters/Types\";\n\n// Tags in these groups will be pulled to the top of the list.\n//   Priority is given to tags with lower index values.\nconst tagPriority = [\"Khronos Official\", \"Staff Picks\"];\nconst UNTAGGED_KEY = \"UNTAGGED\";\n\ntype ResultsBuckets = { [key: string]: IProjectInfo[] };\n\ninterface IGroupedFilters {\n  [dimension: string]: IFilter[];\n}\n\nfunction applyTagFilters(\n  projects: IProjectInfo[],\n  selectedFilters: Set<IFilter>\n): IProjectInfo[] {\n  if (selectedFilters.size < 1) {\n    return projects;\n  }\n\n  const dimensions = Object.values(FilterDimension);\n  const groupedFilters = Array.from(selectedFilters).reduce<IGroupedFilters>(\n    (acc, curr) => {\n      if (!acc[curr.dimension]) {\n        acc[curr.dimension] = [];\n      }\n\n      acc[curr.dimension].push(curr);\n\n      return acc;\n    },\n    {}\n  );\n\n  return projects.filter(project => {\n    let match = false;\n\n    for (const dimension of dimensions) {\n      if (!groupedFilters[dimension]) continue;\n\n      match = groupedFilters[dimension].some(filter => {\n        if (project[dimension]) {\n          // Within the dimension we do an OR.\n          return project[dimension]!.some(v => v === filter.value);\n        }\n\n        return false;\n      });\n\n      // No matches for this dimension? Break and continue to the next once\n      // since we need all dimensions to match for our AND.\n      if (!match) break;\n    }\n\n    return match;\n  });\n}\n\nfunction applyTitleSearchFilter(\n  projects: IProjectInfo[],\n  titleSubstring?: string\n): IProjectInfo[] {\n  if (!titleSubstring) {\n    return projects;\n  }\n  const titleSubstringLowerCase = titleSubstring.toLowerCase();\n  return projects.filter(p =>\n    p.name.toLowerCase().includes(titleSubstringLowerCase)\n  );\n}\n\nfunction sortResults(projects: IProjectInfo[]): IProjectInfo[] {\n  const buckets: ResultsBuckets = {};\n\n  for (const tag of tagPriority) {\n    buckets[tag] = [];\n  }\n\n  buckets[UNTAGGED_KEY] = [];\n\n  for (const project of projects) {\n    if (!project.tags) {\n      buckets[UNTAGGED_KEY].push(project);\n      continue;\n    }\n\n    for (const tag of project.tags) {\n      if (buckets[tag]) {\n        buckets[tag].push(project);\n      } else {\n        buckets[UNTAGGED_KEY].push(project);\n      }\n    }\n  }\n\n  return Object.entries(buckets).flatMap(([_, projects]) => {\n    return projects.sort((a, b) => a.name.localeCompare(b.name));\n  });\n}\n\nexport function* applyFilters() {\n  const [projects, selectedFilters, titleSubstring]: [\n    IProjectInfo[],\n    Set<IFilter>,\n    string\n  ] = yield all([\n    select(projectSelectors.getProjects),\n    select(filterSelectors.getSelectedFilters),\n    select(filterSelectors.getTitleSubstring),\n  ]);\n\n  const filteredResults = applyTagFilters(projects, selectedFilters);\n  const searchedResults = applyTitleSearchFilter(\n    filteredResults,\n    titleSubstring\n  );\n  const results = sortResults(searchedResults);\n\n  yield put(actions.storeResults(results));\n}\n\nexport function* watchForResultUpdates() {\n  yield takeEvery(FilterActionTypes.UPDATE_SELECTED_FILTERS, applyFilters);\n  yield debounce(\n    500,\n    FilterActionTypes.UPDATE_TITLE_SUBSTRING_FILTER,\n    applyFilters\n  );\n}\n","import { fork, put } from \"redux-saga/effects\";\nimport { updateProjects as watchForProjectUpdates } from \"./projects/Sagas\";\nimport { ProjectsActionTypes } from \"./projects/Types\";\nimport { watchForFilterRecalculate } from \"./filters/Sagas\";\nimport { watchForResultUpdates } from \"./results/Sagas\";\n\nexport function* startup() {\n  yield put({ type: ProjectsActionTypes.PROJECTS_REQUESTED });\n}\n\nexport default function* root() {\n  yield fork(startup);\n  yield fork(watchForProjectUpdates);\n  yield fork(watchForFilterRecalculate);\n  yield fork(watchForResultUpdates);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport rootReducer from \"./store/Reducers\";\nimport rootSagas from \"./store/Sagas\";\n\n// A note about the use of redux here; a lot of inner deliberations were made\n// before choosing to pull in both Redux and Sagas for this app. The idea is\n// to keep this app mostly simple, but Redux and Sagas were pulled in for two\n// major reasons:\n//\n//   1. We have to communicate data changes across the app to several components.\n//   2. Redux makes managing complex state changes (such as filtering) easy.\n//\n// Yes, this is probably over-engineered, but Redux is the best tool for this\n// potentially complex task. If you hate it, blame me and I'd be glad to bike\n// shed about it with you. -ANM\n\nconst initialState = {};\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSagas);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\n"],"sourceRoot":""}